#!/usr/bin/env ruby

ROOT = File.expand_path('../..', __FILE__)

require 'bundler/setup'
require 'liquid/boot'
require 'dumbo/cli'

CLI.for(Dumbo::CLI) do
  option :reverse,
    :short => '-r BOOL',
    :long => '--reverse BOOL',
    :description => 'run jobs in reverse order',
    :default => false,
    :proc => Proc.new { |x| x.to_i }

  option :window,
    :short => '-w HOURS',
    :long => '--window HOURS',
    :description => 'scan window in hours, defaults to 24 hours',
    :default => 24,
    :proc => Proc.new { |x| x.to_i }

  option :offset,
    :short => '-f HOURS',
    :long => '--offset HOURS',
    :description => 'offset from now used as interval end, defaults to 2 hours',
    :default => 2,
    :proc => Proc.new { |x| x.to_i }

  option :topics,
    :short => '-t LIST',
    :long => '--topics LIST',
    :description => 'Topics to process (comma seperated), defaults to all in sources.json',
    :proc => Proc.new { |x| x.split(',') }

  option :namenodes,
    :short => '-n LIST',
    :long => '--namenodes LIST',
    :description => 'HDFS namenodes (comma seperated), defaults to "localhost"',
    :default => %w(localhost),
    :proc => Proc.new { |x| x.split(',') }

  option :zookeeper,
    :short => '-z URI',
    :long => '--zookeeper URI',
    :description => 'zookeeper URI, defaults to "localhost:2181/druid"',
    :default => 'localhost:2181/druid'

  option :zookeeper_path,
    :long => '--zookeeper-path PATH',
    :description => 'druid\'s discovery path within zookeeper, defaults to "/discovery"',
    :default => "/discovery"

  option :overlord,
    :short => '-o HOST[:PORT]',
    :long => '--overlord HOST[:PORT]',
    :description => 'overlord hostname and port, defaults to "localhost:8090"',
    :default => 'localhost:8090',
    :proc => Proc.new { |x|
      tokens = x.split(":")
      tokens[0] = "localhost" if tokens[0] == nil || tokens[0] == ""
      tokens[1] = (tokens[1] || "8090").to_i
      "#{tokens[0]}:#{tokens[1]}"
    }

  option :database,
    :short => '-d PATH',
    :long => '--database PATH',
    :description => 'path to database config, defaults to "database.json"',
    :default => 'database.json'

  option :sources,
    :short => '-s PATH',
    :long => '--sources PATH',
    :description => 'path to sources config',
    :required => true

  option :mode,
    :short => '-m MODE',
    :long => '--mode MODE',
    :description => 'mode to perform (verify, merge, compact)',
    :default => "verify"

  option :dryrun,
    :short => '-N',
    :long => '--dryrun',
    :description => 'do not submit tasks to overlord (dry-run)'

  option :limit,
    :short => '-l LIMIT',
    :long => '--limit LIMIT',
    :default => 0,
    :description => 'limit the number of tasks to spawn (defaults to unlimited)',
    :proc => Proc.new {|x| x.to_i }

  option :forced_interval,
    :short => '-i INTERVAL',
    :long => '--interval INTERVAL',
    :description => 'force an explicit interval',
    :proc => Proc.new { |x|
      intervals = x.split("/")
      raise "illegal interval" if intervals.length > 2
      intervals[0] = Time.parse(intervals[0]).utc
      if intervals.length == 1
        intervals[1] = intervals[0] + 1.hour
      else
        intervals[1] = Time.parse(intervals[1]).utc
      end

      raise "illegal interval" if intervals[1] <= intervals[0]
      intervals
    }

  option :force,
    :long => '--force',
    :description => 'force segment generation regardless of state'
  option :copy_source, 
    :long => "--copy-source SOURCE",
    :description => 'source to copy from',
    :default => ""
  option :copy_target, 
    :long => "--copy-target TARGET",
    :description => 'target to copy to',
    :default => ""

end.run

# vim: et ts=2 sw=2
